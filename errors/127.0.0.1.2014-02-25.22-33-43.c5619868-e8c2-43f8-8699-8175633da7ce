(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> cannot concatenate 'str' and 'NoneType' objects"
p3
sS'layer'
p4
S'/home/hduser/web2py/applications/Hadoop/controllers/default.py'
p5
sS'code'
p6
S'# coding: utf8\n# try something like\nimport os\nimport subprocess\nimport MySQLdb\nTable = "workflow";\nmachine="localhost";\ndatabase_name="hadoop";\ndb_username="root";\npassword="hadoop";\n\ndef index():\n    redirect(URL(\'main\'))\n\n    return dict(message="hello from default.py")\ndef compile1():\n    return dict(hello="hello");\ntkns=[]\ncodegen1="";\ndef codegen(str="",table=""):\n    posvars=request.post_vars;\n#    //codegen:          generate import-export code without performing actual import/export, modify the gnerated java file, compile it to jar, give it to sqoop.\n#    global $TABLE,$machine,$password,$db_username,$database_name;\n    global codegen1;\n    if str=="":\n       # os.remove(Table+".java");\n       # os.remove(Table+".jar");\n       # os.remove(Table+".class")\n        \n        codegen1= "/home/hduser/sqoop/bin/sqoop codegen --connect jdbc:mysql://"+machine+"/"+database_name+" --username "+db_username+" --password \'"+password+"\' --table "+Table ;\n        if posvars[\'op\']=="import":\n            if posvars[\'field_delim\']!="":\n                codegen1=codegen1+" --fields-terminated-by "+"\'" +posvars[\'field_delim\']+"\'";\n            if posvars[\'line_delim\']!="":\n                codegen1=codegen1+" --lines-terminated-by "+"\'" +posvars[\'line_delim\']+"\'";\n            if \'enclosed\' in posvars:\n                if posvars[\'enclosingchar\']==\'"\':\n                    posvars[\'enclosingchar\']=\'\\"\';\n                    codegen1=codegen1+" "+posvars[\'enclosed\']+" \'"+posvars[\'enclosingchar\']+ "\'";\n\n    else:\n        os.remove(TABLE+".java");\n        os.remove(TABLE+".jar");\n        os.remove(TABLE+".class");\n        codegen1=str;\n\n    codegen1 = codegen1+" --bindir . 2> err ; echo $?"; \n    \n#    echo "codegen command=".$codegen."<br/>";\n    output = os.popen(codegen1).read()\n#    $output= shell_exec($codegen);\n    tkns=output.split(\'\\n\');\n    \n #   if output[output.__len__()-2]!="0":\n    return dict (tkns=tkns,message = "codegen wright")\n#       return "<br>??????????????Codegen error<br>";#echo $output;exit(0);\n\n\n\n\n\n\ndef main():\n    tables = []\n    path = \'/\'\n#    return dict(test = request.get_vars);\n    if \'path\' in request.get_vars:\n        path = request.get_vars[\'path\'];\n    a = "/home/hduser/hadoop/bin/hadoop fs -ls "+path+" | tr -s \' \' | cut -d \' \' -f8"\n    output = os.popen(a).read()\n    tokens = output.split(\'\\n\')\n    print "hahhaha"\n    error = ""\n    try :\n        connection = MySQLdb.connect(host=\'localhost\',user=\'root\', passwd=\'hadoop\', db=\'hadoop\')\n        print "connected"\n        cur=connection.cursor()     \n        query = "show tables";\n        cur.execute(query)\n        tables = cur.fetchall() \n        return dict(tokens=tokens,error=error,tables=tables,test = request.get_vars)\n    except:\n        print "weee"\n        error = "failed to connect to MySQL: "\n        return dict(tokens=tokens,error=error,tables=tables)   \n   # proc = subprocess.Popen([\'/home/hduser1/hadoop/bin/hadoop\',\'fs\',\'-ls\',\'"/"\',\'|\',\'tr\',\'-s\' ,a,\'|\', \'cut\', \'-d\' , a    , \'-f8\'], stdout=subprocess.PIPE,shell=True)\n  #  (output,err) = proc.communicate()\n   # print "ran"\n   # print output\n   \n  #  print tokens\n    \n#def codegen():\n#    return dict(a="apple");    \n\n#print aa;\ndef action():\n    global codegen1;\n    posvars = request.post_vars;\n    print posvars;\n    a="/home/hduser/sqoop/bin/sqoop import --connect jdbc:mysql://localhost/hadoop --username root --password \'hadoop\' --table login; echo $?"\n    comm = "/home/hduser/sqoop/bin/sqoop "+posvars[\'op\'];\n    if posvars[\'op\'] == "export":\n        if \'directory\' in posvars:   #isset($_POST[\'directory\']))\n            sourcedir=posvars[\'directory\']; #radio based input\n        if posvars[\'sourcedir\']!="":\n            sourcedir=posvars[\'sourcedir\']; #text based input : priority more\n\n        exp="";\n        if \'decrypt\' in posvars:\n            codegen();\n            array1=posvars[\'decrypt_columns\'].split(\',\');\n            print array1;\n            change_export(Table+".java",array1,posvars[\'deckey\']);\n            compile1();\n            exp="  --jar-file "+Table+".jar --class-name "+Table;\n        comm=comm+" --connect jdbc:mysql://"+machine+"/"+database_name+" --username "+db_username+" --password \'"+password+"\' --table "+Table+" "+ " --export-dir "+sourcedir + exp;\n\n        if \'update\' in posvars:\n            if posvars[\'refcol\']=="":\n                print "Specify the reference column<br/>";\n                exit(0);\n            comm=comm+" --update-key "+posvars[\'refcol\'];\n        comm=comm+" --export-dir "+sourcedir;\n        if \'validate\' in posvars:\n            comm=comm+" --validate";\n        if \'parallel1\' in posvars:\n            comm=comm+" -m "+posvars[\'parallel\'];\n\n        comm=comm+" ; echo $?";\n        print "Export command="+comm+"<br>";\n                       ####this is the main execute step .... not done because sqoop not working properly\n        #echo $output;\n#        val=output[strlen(output)-2];\n        val = "0";\n        if val=="0":#//;//shell_exec("echo $?");\n            print "<h2> Successfully Exported from HDFS to RDBMS:)</h2>";\n            \n        else:\n            print "<h2> Export from HDFS to RDBMS Failed :( </h2>";\n\n    elif posvars[\'op\'] == "import":\n\n        imp="";\n        if \'encrypt\' in posvars:\n            codegen();\n            array=posvars[\'encrypt_columns\'].split(\',\');#explode(",",$_POST[\'encrypt_columns\']);\n            #print_r($array);\n#            change_import($TABLE.".java",$array,$_POST[\'enckey\']);\n            compile1();\n            imp="  --jar-file "+Table+".jar --class-name "+Table;\n        comm=comm + " --connect jdbc:mysql://"+machine+"/"+database_name+" --username "+db_username+" --password \'"+password+"\' --append --table "+posvars[\'table\']+" "+imp;\n        \n        if posvars[\'targetdir\']!="":\n            comm=com+" --target-dir "+posvars[\'targetdir\'];\n        elif \'directory\' not in posvars:\n            f=0;\n        elif posvars[\'directory\']!="default":\n            comm =comm+" --target-dir "+posvars[\'directory\'];\n\n#    if(isset($_POST[\'delete\']))$comm.= " --delete-tarPOST-dir";\n\n        if \'filetype\' in posvars:\n            comm=comm+ " "+posvars[\'filetype\'];\n        \n#    if(isset($_POST[\'importall\']))\n\n        if \'append\' in posvars:\n            comm= comm + " --append";                            \n        if posvars[\'where\']!="":\n            comm= comm + \' --where "\'+posvars[\'where\']+\'"\';\n\n        elif \'validate\' in posvars:\n            comm= comm+" --validate";\n\n        if \'encrypt\' not in posvars:\n    \n            if posvars[\'columns\']!="":\n                comm=comm+ " --columns "+\'"\'+posvars[\'columns\']+\'"\';\n            if posvars[\'field_delim\']!="":\n                comm=comm+" --fields-terminated-by "+"\'" +posvars[\'field_delim\']+"\'";\n            if posvars[\'line_delim\']!="":\n                comm=comm+" --lines-terminated-by "+"\'" +posvars[\'line_delim\']+"\'";    \n            if \'enclosed\' in posvars:\n                if posvars[\'enclosingchar\']==\'"\':\n                    posvars[\'enclosingchar\']=\'\\"\';\n                comm=comm+" "+posvars[\'enclosed\']+" \'"+posvars[\'enclosingchar\']+"\'";\n\n        if \'compressed\' in posvars:\n            comm=comm+" -z";\n        if \'parallel1\' in posvars:\n            comm=comm+" -m "+posvars[\'parallel\'];\n\n        comm=comm+ " ; echo $?";\n    #$comm="ls ; echo $?";\n#    echo "comm<br/>"; \n    output = os.popen(comm).read();\n#    output= shell_exec($comm);\n#    echo $output;\n    val=output[output.__len__()-2];\n#    echo $val;\n#    echo "---".$output[strlen($output)-1]."---"."---".$output[strlen($output)-2]."---"."---".$output[strlen($output)-3]."---"."<br/>";\n    if val=="0": #{//;//shell_exec("echo $?");\n        return dict(message = "Successfully Imported from RDBMS to HDFS",val=val,tkns=tkns,codegen1=codegen1,comm=comm);\n    else:\n        return dict(comm=comm,message = "Failed!",val = val,codegen1=codegen1);\n\n\n        \n#    return dict(posvars = request.post_vars);\n\nresponse._vars=response._caller(action)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/hduser/web2py/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/home/hduser/web2py/applications/Hadoop/controllers/default.py", line 212, in <module>\n  File "/home/hduser/web2py/gluon/globals.py", line 372, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/hduser/web2py/applications/Hadoop/controllers/default.py", line 102, in action\n    comm = "/home/hduser/sqoop/bin/sqoop "+posvars[\'op\'];\nTypeError: cannot concatenate \'str\' and \'NoneType\' objects\n'
p11
s.